# -*- coding: utf-8 -*-
"""model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BzPBYeaVouusXMZhLN90czcMIjswJLI9
"""
import time
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc, confusion_matrix
import numpy as np # linear algebra
from tqdm import tqdm
from sklearn.model_selection import train_test_split
import tensorflow as tf
from keras.models import Sequential
from keras.layers.recurrent import LSTM, GRU,SimpleRNN
from keras.layers.core import Dense, Activation, Dropout
from keras.layers.embeddings import Embedding
from keras.layers.normalization import BatchNormalization
from keras.utils import np_utils
from sklearn import preprocessing, decomposition, model_selection, metrics, pipeline
from keras.layers import GlobalMaxPooling1D, Conv1D, MaxPooling1D, Flatten, Bidirectional, SpatialDropout1D
from keras.preprocessing import sequence, text
from keras.callbacks import EarlyStopping
from keras.preprocessing.text import Tokenizer
from tensorflow import keras
from keras.preprocessing.sequence import pad_sequences
from keras.models import Model
from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding ,Bidirectional
from keras.optimizers import RMSprop,Adam
from keras.callbacks import EarlyStopping

#Function to get the scores for each model in a df
def score_matrix(model_dict,X,y):   
    model_name, ac_score_list, p_score_list, r_score_list, f1_score_list = [], [], [], [], []
    for k,v in model_dict.items():   
        model_name.append(k)
        start = time.time()
        #Train test split with stratified sampling for evaluation
        X_train, X_test, y_train, y_test = train_test_split(X, 
                                                    y, 
                                                    test_size = .2, 
                                                    shuffle = True, 
                                                    random_state = 3)
        v.fit(X_train, y_train)
        y_pred = v.predict(X_test)
        print("Total Time for",k + " is ",((time.time() - start)/60))
        ac_score_list.append(accuracy_score(y_test, y_pred)*100)
        p_score_list.append(precision_score(y_test, y_pred, average='macro',zero_division=1))
        r_score_list.append(recall_score(y_test, y_pred, average='macro',zero_division=1))
        f1_score_list.append(f1_score(y_test, y_pred, average='macro',zero_division=1))
        model_comparison_df = pd.DataFrame([model_name, ac_score_list, p_score_list, r_score_list, f1_score_list]).T
        model_comparison_df.columns = ['model_name', 'accuracy_score', 'precision_score', 'recall_score', 'f1_score']
        model_comparison_df = model_comparison_df.sort_values(by='f1_score', ascending=False)
    return model_comparison_df
        
def RNN(metrics,num_words,embed_size,max_len):
  model = Sequential()
  model.add(Embedding(num_words,
                     embed_size,
                     input_length=max_len))
  model.add(SimpleRNN(100))
  model.add(Dense(74, activation='sigmoid'))
  model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=metrics)
  return model

# A simple LSTM with glove embeddings and one dense layer

def SILSTM(metrics,num_words,embed_size,embedding_matrix,max_len):
  model = Sequential()
  model.add(Embedding(num_words,
                     embed_size,
                     weights=[embedding_matrix],
                     input_length=max_len,
                     trainable=False))

  model.add(LSTM(100, dropout=0.3, recurrent_dropout=0.3))
  model.add(Dense(74, activation='sigmoid'))
  model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=metrics)
  return model        

 # A simple bidirectional LSTM with glove embeddings and one dense layer

def BILSTM(metrics,num_words,embed_size,embedding_matrix,max_len):
  model = Sequential()
  model.add(Embedding(num_words,
                     embed_size,
                     weights=[embedding_matrix],
                     input_length=max_len,
                     trainable=False))
  model.add(Bidirectional(LSTM(300, dropout=0.3, recurrent_dropout=0.3)))
  model.add(Dense(74,activation='sigmoid'))
  model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=metrics)
  return model

#Simple GRU model

def GRU_MOD(metrics,num_words,embed_size,embedding_matrix,max_len):
  model = Sequential()
  model.add(Embedding(num_words,
                     embed_size,
                     weights=[embedding_matrix],
                     input_length=max_len,
                     trainable=False))
  model.add(SpatialDropout1D(0.3))
  model.add(GRU(300))
  model.add(Dense(74, activation='sigmoid'))
  model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=metrics)
  return model
